/*flexberryautogenerated="true"*/

namespace Sneg.АСУ_Склад
{
    using ICSSoft.STORMNET;
    using ICSSoft.STORMNET.Web.Controls;
    using ICSSoft.STORMNET.Web.AjaxControls;
    using System.Linq;
    using ICSSoft.STORMNET.Business.LINQProvider;
    using ICSSoft.STORMNET.FunctionalLanguage.SQLWhere;
    using ICSSoft.STORMNET.FunctionalLanguage;
    using ICSSoft.STORMNET.Business;
    using System.Web.Services;

    public partial class ПоступленияE : BaseEditForm<Поступления>
    {
        /// <summary>
        /// Конструктор формы.
        /// </summary>
        public ПоступленияE()
            : base(Поступления.Views.ПоступленияE)
        {
        }

        /// <summary>
        /// Путь до формы.
        /// </summary>
        public static string FormPath
        {
            get { return "~/forms/Postupleniya/PostupleniyaE.aspx"; }
        }

        /// <summary>
        /// Вызывается самым первым в Page_Load.
        /// </summary>
        protected override void Preload()
        {
        }

        [WebMethod]
        public static decimal GetCapacity(string carPk)
        {
            var ds = (SQLDataService)DataServiceProvider.DataService;
            return ds.Query<Машина>(Машина.Views.МашинаE).Where(k=>k.__PrimaryKey==carPk).FirstOrDefault().Грузоподъемность;           
        }

        [WebMethod]
        public static decimal SetSummaryGoods(string whPk)
        {
            var ds = (SQLDataService)DataServiceProvider.DataService;
            var warehouse = ds.Query<Склад>(Склад.Views.СкладE).Where(k => k.__PrimaryKey == whPk).First();
            var goodsInWh = warehouse.ТоварНаСкладе;
            decimal sum = 0;
            foreach(ТоварНаСкладе gInWh in goodsInWh)
            {
                sum += gInWh.Количество;
            }
            return sum;
        }

        /// <summary>
        /// Здесь лучше всего писать бизнес-логику, оперируя только объектом данных.
        /// </summary>
        protected override void PreApplyToControls()
        {
            var ds = (SQLDataService)DataServiceProvider.DataService;
            var actualCar = ds.Query<Машина>(Машина.Views.МашинаL).Where(k => k.Актуально);
            ctrlМашина.LimitFunction = LinqToLcs.GetLcs(actualCar.Expression, Машина.Views.МашинаL).LimitFunction;
            
            var actualWarehouse = ds.Query<Склад>(Склад.Views.СкладL).Where(k => k.Актуально);
            ctrlСклад.LimitFunction = LinqToLcs.GetLcs(actualWarehouse.Expression, Склад.Views.СкладL).LimitFunction;

            var actualGood = ds.Query<Товар>(Товар.Views.ТоварL).Where(k => k.Актуально);
            ctrlТовар.LimitFunction = LinqToLcs.GetLcs(actualGood.Expression, Товар.Views.ТоварL).LimitFunction;
        }

        /// <summary>
        /// Здесь лучше всего изменять свойства контролов на странице,
        /// которые не обрабатываются WebBinder.
        /// </summary>
        protected override void PostApplyToControls()
        {
            if (IsPostBack)
                Page.Validate();
        }

        /// <summary>
        /// Вызывается самым последним в Page_Load.
        /// </summary>
        protected override void Postload()
        {
        }

        /// <summary>
        /// Валидация объекта для сохранения.
        /// </summary>
        /// <returns>true - продолжать сохранение, иначе - прекратить.</returns>
        protected override bool PreSaveObject()
        {
            return base.PreSaveObject();
        }

        /// <summary>
        /// Нетривиальная логика сохранения объекта.
        /// </summary>
        /// <returns>Объект данных, который сохранился.</returns>
        protected override DataObject SaveObject()
        {
            return base.SaveObject();
        }
    }
}